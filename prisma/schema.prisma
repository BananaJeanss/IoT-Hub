generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username            String?  @unique
  email               String?  @unique
  password            String?
  bio                 String?
  image               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  tags                String[] @default([])
  backgroundImage     String?
  gradientStartRgb    String?  @default("rgb(0, 183, 255)")
  gradientEndRgb      String?  @default("rgb(179, 255, 236)")
  backgroundType      String?  @default("gradient")
  wallCommentsPrivacy String?  @default("everyone")

  accounts Account[]
  projects Project[]
  guides   Guide[]
  stars    Star[]
  views    View[]
  comments Comment[]
  Pin      Pin[]
  authoredPosts WallPost[] @relation("AuthoredPosts")
  wallPosts     WallPost[] @relation("WallPosts")
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String
  slug             String   @unique
  description      String?
  content          String
  image            String?
  tags             String[] @default([])
  links            Json     @default("[]") 
  backgroundType   String   @default("gradient")
  gradientStart    String   @default("#00b7ff")
  gradientEnd      String   @default("#b3ffec")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String   @db.Uuid
  pinned           Boolean  @default(false)

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  stars        Star[]
  views        View[]
  comments     Comment[]
  Pin          Pin[]
  FeaturedPost FeaturedPost?
}

model Guide {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String
  slug             String   @unique
  description      String? 
  content          String
  image            String?
  tags             String[] @default([])
  links            Json     @default("[]")
  backgroundType   String   @default("gradient")
  gradientStart    String   @default("#00b7ff")
  gradientEnd      String   @default("#b3ffec")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String   @db.Uuid

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  stars        Star[]
  views        View[]
  comments     Comment[]
  FeaturedPost FeaturedPost?
}

model Star {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  projectId String?  @db.Uuid
  guideId   String?  @db.Uuid
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
  guide   Guide?   @relation(fields: [guideId], references: [id])

  @@unique([userId, projectId])
  @@unique([userId, guideId])
}

model View {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @db.Uuid
  projectId String?  @db.Uuid
  guideId   String?  @db.Uuid
  ip        String?
  createdAt DateTime @default(now())

  user    User?    @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
  guide   Guide?   @relation(fields: [guideId], references: [id])
}

model Comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  projectId String?  @db.Uuid
  guideId   String?  @db.Uuid
  content   String
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
  guide   Guide?   @relation(fields: [guideId], references: [id])
}

model Pin {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String @db.Uuid
  projectId String @db.Uuid
  order     Int

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@unique([userId, order])
}

model FeaturedPost {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId String? @db.Uuid
  guideId   String? @db.Uuid
  order     Int

  project Project? @relation(fields: [projectId], references: [id])
  guide   Guide?   @relation(fields: [guideId], references: [id])

  @@unique([projectId])
  @@unique([guideId])
  @@unique([order])
}

model WallPost {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content     String
  authorId    String   @db.Uuid
  wallOwnerId String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  author    User @relation("AuthoredPosts", fields: [authorId], references: [id], onDelete: Cascade)
  wallOwner User @relation("WallPosts", fields: [wallOwnerId], references: [id], onDelete: Cascade)
  
  @@map("wall_posts")
}